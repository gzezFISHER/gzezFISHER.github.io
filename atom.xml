<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fisher&#39;s blog</title>
  
  <subtitle>OIer</subtitle>
  <link href="https://gzezfisher.top/atom.xml" rel="self"/>
  
  <link href="https://gzezfisher.top/"/>
  <updated>2022-01-30T12:02:58.016Z</updated>
  <id>https://gzezfisher.top/</id>
  
  <author>
    <name>Fisher Cai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UOJ435 Simple Tree</title>
    <link href="https://gzezfisher.top/2022/01/30/uoj435/"/>
    <id>https://gzezfisher.top/2022/01/30/uoj435/</id>
    <published>2022-01-30T09:58:38.000Z</published>
    <updated>2022-01-30T12:02:58.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一棵有根树，根为 $1$，点有点权.<br>现在有 $m$ 次操作，操作有3种：</p><ul><li><code>1 x y w</code>，将 $x$ 到 $y$ 的路径上的点点权加上 $w$ (其中 $w=\pm 1$)；</li><li><code>2 x y</code>，询问在 $x$ 到 $y$ 的路径上有多少个点点权 $&gt;0$；</li><li><code>3 x</code>，询问在 $x$ 的子树里的点有多少个点点权 $&gt;0$.</li></ul><p>强制在线，$n,m\le 10^5,-10^9\le\text{点权}\le10^9$<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先考虑序列上的做法<br>问题比较复杂，我们用分块来处理</p><p>我们把每一块内部预先排好序，维护在排好序的块内下标最小的大于零点的下标 $pts$ 以及对于块中每个数第一个<strong>严格</strong>大于和小于该数的位置 $nxt$ 和 $lst$</p><ul><li>查询的时候，对于整块，用右端点减去 $pts$ 即可得到答案<br>对于散块暴力统计</li><li>修改的时候，对于整块，我们修改零点，然后尝试让 $pts$ 往 $nxt$ 或 $lst$ 跳<br>对于散块，暴力修改并归并排序</li></ul><p>把序列问题放在树上，一个显然的想法是树链剖分，$\mathcal{O}(n\log n+q\sqrt{n}\log{n})$，不足以通过此题</p><p>其实在树链剖分的情况下 $\sqrt{n}$ 的块长不是最优的<br>每次链的询问和修改，涉及的整块是 $\mathcal{O}(\sqrt{n})$ 级别的，然而涉及的散块元素个数是 $\mathcal{O}(\sqrt{n}\log{n})$ 级别的，因此块长 $\sqrt{n\log n}$ 时取到最优复杂度 $\mathcal{O}(n\log n+q\sqrt{n\log n})$</p><p>考虑使用一个分块上树通用的trick，对每条链单独分块<br>下面证明链操作的时间复杂度是 $\mathcal{O}(\sqrt{n})$</p><p>考虑以一个点与其祖先为顶点的链，因为任意一条链都可以由两条这样的链组成<br>设这条链从上到下依次经过的重链分别为 $lnk_0, lnk_1, …, lnk_k$<br>有</p><script type="math/tex; mode=display">\text{len}(lnk_i)\le\text{subtreeSize}(\text{top}(lnk_i))\le\frac{n}{2^i}</script><p>其中 $\text{top}(x)$ 表示链 $x$ 的链顶</p><script type="math/tex; mode=display">\begin{align*}T(n)&=\sum_{0\le i\le k}\sqrt{\text{len}(lnk_i)}\\&\le\sum_{0\le i\le k}\sqrt{\frac{n}{2^i}}\\&=\sqrt{n}\sum_{0\le i\le k}\frac{1}{\sqrt{2}}^i\\&=\Theta(\sqrt{n})\end{align*}</script><p>即复杂度为 $\mathcal{O}(\sqrt{n})$</p><p>下面考虑子树查询</p><p>我们把每条重链按链顶dfn序排序，发现每棵子树都是由一条重链的一部分和排序后连续的完整重链构成<br>修改时，对于 $\mathcal{O}(\log n)$ 条被修改的重链，在树状数组上更新答案<br>子树询问时，区间查询即可</p><p>总复杂度为 $\mathcal{O}(n\log n+q\sqrt{n}+q\log^2 n)$</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>散块常数大，调参很必要</p><p>代码<br><figure class="highlight cpp"><figcaption><span>uoj435.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>, maxs = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, T;</span><br><span class="line"><span class="keyword">int</span> val[maxn + <span class="number">5</span>];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> stamp;</span><br><span class="line"><span class="keyword">int</span> dep[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> fa[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> heavy_son[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> siz[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tp[maxn + <span class="number">5</span>], bt[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> id[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> lnk[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> lcnt;</span><br><span class="line"><span class="keyword">int</span> lid[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> minl[maxn + <span class="number">5</span>], maxl[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; g[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        <span class="keyword">if</span> (siz[v] &gt; siz[heavy_son[u]])</span><br><span class="line">            heavy_son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    id[u] = ++stamp;</span><br><span class="line">    lnk[u] = top;</span><br><span class="line">    <span class="keyword">if</span> (u == top)</span><br><span class="line">        tp[++lcnt] = id[u];</span><br><span class="line">    <span class="keyword">if</span> (heavy_son[u] == <span class="number">0</span>)</span><br><span class="line">        bt[lcnt] = id[u];</span><br><span class="line">    lid[u] = lcnt;</span><br><span class="line">    minl[u] = lcnt + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (heavy_son[u])</span><br><span class="line">        <span class="built_in">dfs2</span>(heavy_son[u], u, top);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; g[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f || v == heavy_son[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    maxl[u] = lcnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fenwic</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= lcnt) &#123;</span><br><span class="line">            t[x] += y;</span><br><span class="line">            x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res += t[x];</span><br><span class="line">            x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_</span>(r) - <span class="built_in">query_</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; bit;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> tot[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> a[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> blg[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> zero[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> lp[maxn + <span class="number">5</span>], rp[maxn + <span class="number">5</span>], pts[maxn + <span class="number">5</span>];</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp1[maxs + <span class="number">5</span>], tmp2[maxs + <span class="number">5</span>];</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; sorted[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> nxt[maxn + <span class="number">5</span>], lst[maxn + <span class="number">5</span>], lpts[maxn + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> bsiz = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="number">.12</span> * len));</span><br><span class="line">        <span class="keyword">int</span> bcnt = <span class="built_in">ceil</span>(<span class="number">1.</span> * len / bsiz);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">            a[i] = arr[i];</span><br><span class="line">            sorted[i] = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(arr[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt + <span class="number">1</span>; i &lt;= cnt + bcnt; i++) &#123;</span><br><span class="line">            lp[i] = l + (i - cnt - <span class="number">1</span>) * bsiz;</span><br><span class="line">            rp[i] = <span class="built_in">min</span>(r, l + (i - cnt) * bsiz - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = lp[i]; j &lt;= rp[i]; j++)</span><br><span class="line">                blg[j] = i;</span><br><span class="line">            <span class="built_in">sort</span>(sorted + lp[i], sorted + rp[i] + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">calcNxtLst</span>(i);</span><br><span class="line">            tot[lk] += rp[i] - pts[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += bcnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calcNxtLst</span><span class="params">(<span class="keyword">int</span> bid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rp[bid], j = rp[bid] + <span class="number">1</span>; i &gt;= lp[bid]; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt; lp[bid] &amp;&amp; sorted[i].first == sorted[i - <span class="number">1</span>].first)</span><br><span class="line">                i--;</span><br><span class="line">            nxt[i] = j;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= rp[bid])</span><br><span class="line">                lst[j] = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lpts[bid] = i;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">        lst[lp[bid]] = lp[bid];</span><br><span class="line">        pts[bid] = rp[bid] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lp[bid]; i &lt;= rp[bid]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sorted[i].first &gt; zero[bid]) &#123;</span><br><span class="line">                pts[bid] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> bid, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> delta, <span class="keyword">int</span> lk)</span> </span>&#123;</span><br><span class="line">        tot[lk] += pts[bid];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">            a[i] += delta;</span><br><span class="line">        <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lp[bid]; i &lt;= rp[bid]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sorted[i].second &gt;= l &amp;&amp; sorted[i].second &lt;= r)</span><br><span class="line">                tmp1[++cnt1] =</span><br><span class="line">                    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(sorted[i].first + delta, sorted[i].second);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tmp2[++cnt2] = sorted[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">merge</span>(tmp1 + <span class="number">1</span>, tmp1 + cnt1 + <span class="number">1</span>, tmp2 + <span class="number">1</span>, tmp2 + cnt2 + <span class="number">1</span>,</span><br><span class="line">              sorted + lp[bid]);</span><br><span class="line">        <span class="built_in">calcNxtLst</span>(bid);</span><br><span class="line">        tot[lk] -= pts[bid];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> delta, <span class="keyword">int</span> lk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lb = blg[l], rb = blg[r];</span><br><span class="line">        <span class="keyword">if</span> (lb == rb)</span><br><span class="line">            <span class="built_in">mergeSort</span>(lb, l, r, delta, lk);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">mergeSort</span>(lb, l, rp[lb], delta, lk);</span><br><span class="line">            <span class="built_in">mergeSort</span>(rb, lp[rb], r, delta, lk);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lb + <span class="number">1</span>; i &lt; rb; i++) &#123;</span><br><span class="line">                tot[lk] += pts[i];</span><br><span class="line">                zero[i] -= delta;</span><br><span class="line">                <span class="keyword">if</span> (pts[i] &gt; rp[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sorted[lpts[i]].first &gt; zero[i])</span><br><span class="line">                        pts[i] = lpts[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (delta == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sorted[lst[pts[i]]].first &gt; zero[i])</span><br><span class="line">                            pts[i] = lst[pts[i]];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorted[pts[i]].first &lt;= zero[i])</span><br><span class="line">                        pts[i] = nxt[pts[i]];</span><br><span class="line">                &#125;</span><br><span class="line">                tot[lk] -= pts[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lb = blg[l], rb = blg[r];</span><br><span class="line">        <span class="keyword">if</span> (lb == rb) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; zero[lb])</span><br><span class="line">                    res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= rp[lb]; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; zero[lb])</span><br><span class="line">                    res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lp[rb]; i &lt;= r; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; zero[rb])</span><br><span class="line">                    res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lb + <span class="number">1</span>; i &lt; rb; i++)</span><br><span class="line">                res += rp[i] - pts[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; bl;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryLnk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lnk[x] != lnk[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[lnk[x]] &lt; dep[lnk[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        res += bl.<span class="built_in">query</span>(tp[lid[x]], id[x]);</span><br><span class="line">        x = fa[lnk[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[y] &lt; dep[x])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    res += bl.<span class="built_in">query</span>(id[x], id[y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySubtree</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bl.<span class="built_in">query</span>(id[x], bt[lid[x]]) + bit.<span class="built_in">query</span>(minl[x], maxl[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyLnk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (lnk[x] != lnk[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[lnk[x]] &lt; dep[lnk[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="keyword">int</span> ori = bl.tot[lid[x]];</span><br><span class="line">        bl.<span class="built_in">modify</span>(tp[lid[x]], id[x], delta, lid[x]);</span><br><span class="line">        bit.<span class="built_in">modify</span>(lid[x], bl.tot[lid[x]] - ori);</span><br><span class="line">        x = fa[lnk[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[y] &lt; dep[x])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">int</span> ori = bl.tot[lid[x]];</span><br><span class="line">    bl.<span class="built_in">modify</span>(id[x], id[y], delta, lid[x]);</span><br><span class="line">    bit.<span class="built_in">modify</span>(lid[x], bl.tot[lid[x]] - ori);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;q, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val[id[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lcnt; i++) &#123;</span><br><span class="line">        bl.<span class="built_in">resize</span>(val, tp[i], bt[i], i);</span><br><span class="line">        bit.<span class="built_in">modify</span>(i, bl.tot[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lstans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (T == <span class="number">1</span>)</span><br><span class="line">            x ^= lstans;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;y, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (T == <span class="number">1</span>)</span><br><span class="line">                y ^= lstans;</span><br><span class="line">            <span class="built_in">modifyLnk</span>(x, y, w);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">            <span class="keyword">if</span> (T == <span class="number">1</span>)</span><br><span class="line">                y ^= lstans;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lstans = <span class="built_in">queryLnk</span>(x, y));</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lstans = <span class="built_in">querySubtree</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有一棵有根树，根为 $1$，点有点权.&lt;br&gt;现在有 $m$ 次操作，操作有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 x y w&lt;/code&gt;，将 $x$ 到 $y$ 的路径上的点点权加上 $w$ (其中 $w=\pm 1$)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 x y&lt;/code&gt;，询问在 $x$ 到 $y$ 的路径上有多少个点点权 $&amp;gt;0$；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 x&lt;/code&gt;，询问在 $x$ 的子树里的点有多少个点点权 $&amp;gt;0$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强制在线，$n,m\le 10^5,-10^9\le\text{点权}\le10^9$&lt;br&gt;</summary>
    
    
    
    <category term="根号算法" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="分块" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/%E5%88%86%E5%9D%97/"/>
    
    
    <category term="分块" scheme="https://gzezfisher.top/tags/%E5%88%86%E5%9D%97/"/>
    
    <category term="树链剖分" scheme="https://gzezfisher.top/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1039D You Are Given a Tree</title>
    <link href="https://gzezfisher.top/2022/01/29/cf1039d/"/>
    <id>https://gzezfisher.top/2022/01/29/cf1039d/</id>
    <published>2022-01-29T01:44:24.000Z</published>
    <updated>2022-01-30T10:25:46.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵有 $n$ 个节点的树. 对于满足 $1\le k\le n$ 的每一个 $k$，把树分成若干条包含 $k$ 个顶点的链，其中每个点最多属于一条链，问最多能分得几条链.</p><p>$n\le 10^5$<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑 $k$ 固定时怎么做</p><p>我们自下而上贪心，对于一个点，如果在它的子树内有一条经过该点且不经过以被使用点的链，那么我们就将这条链计入答案并将该点标记为使用过</p><p>简单证明一下：<br>对于点 $u$ 满足在其子树内有一条经过该点且不经过以被使用点的链，如果这条链不计入答案，而是选取一条经过 $u$ 的但不完全在 $u$ 子树中的链，这样划分的链数不会增加，反而会占用这条链在点 $u$ 子树外的点<br>因此，按照上述方法贪心是最优的</p><p>令 $f_i$ 表示 $k=i$ 时的答案，显然有 $f_i\le\lfloor\frac{n}{i}\rfloor$</p><p>类似除法分块，$f_i$ 一共只有 $\mathcal{O}(\sqrt{n})$ 种取值<br>证明如下：</p><ul><li>$i\le \sqrt{n}$<br> 显然只有不超过 $\sqrt{n}$ 种取值</li><li>$i&gt;\sqrt{n}$<br> $f_i&lt;\lfloor\frac{n}{sqrt{n}}\rfloor=\sqrt{n}$<br> 显然也只有不超过 $\sqrt{n}$ 种取值</li></ul><p>因此我们对于每一种取值二分右端点，时间复杂度为 $\mathcal{O}(n\sqrt{n}\log n)$，不足以通过此题</p><p>观察到前几种取值比较密集，对每种取值二分是很浪费的，考虑对前 $T$ 项直接暴力，只对后面的 $\mathcal{O}(\frac{n}{T})$ 种取值二分</p><p>时间复杂度为 $\mathcal{O}(nT+\frac{n}{T}\log n)$，$T$ 取 $\sqrt{n\log n}$ 时有最优复杂度 $\mathcal{O}(n\sqrt{n\log n})$</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>实现的时候注意常数，特别是不要每次贪心都dfs一遍，推荐直接在dfs序上做</p><p>代码 <a href="https://codeforces.com/contest/1039/submission/144337474">codeforces submission 144337474</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一棵有 $n$ 个节点的树. 对于满足 $1\le k\le n$ 的每一个 $k$，把树分成若干条包含 $k$ 个顶点的链，其中每个点最多属于一条链，问最多能分得几条链.&lt;/p&gt;
&lt;p&gt;$n\le 10^5$&lt;br&gt;</summary>
    
    
    
    <category term="根号算法" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="根号分治" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
    
    <category term="贪心" scheme="https://gzezfisher.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="二分" scheme="https://gzezfisher.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="除法分块" scheme="https://gzezfisher.top/tags/%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97/"/>
    
    <category term="根号分治" scheme="https://gzezfisher.top/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>CF587F Duff is Mad</title>
    <link href="https://gzezfisher.top/2022/01/28/cf587f/"/>
    <id>https://gzezfisher.top/2022/01/28/cf587f/</id>
    <published>2022-01-28T12:34:33.000Z</published>
    <updated>2022-01-30T10:26:15.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定 $n$ 个字符串 $S_{1…n}$.<br>定义 $\text{occur}(t, s)$ 为 字符串 $t$ 在字符串 $s$ 中的出现次数. 有 $q$ 次询问，每次给出 $l$，$r$ 和 $k$，输出 $\sum\limits_{l\le i\le r}\text{occur}(s_i, s_k)$.</p><p>$n,k,\sum |s_i|\le 10^5$<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们对所有串建立fail树</p><p>令 $p_{i,j}$ 表示串 $s_i$ 的前 $j$ 个字符在AC自动机上对应点的编号，$end_{i}$ 表示串 $s_i$ 在AC自动机上对应点的编号<br>有 </p><script type="math/tex; mode=display">\sum_{l\le i\le r}\text{occur}(s_i, s_k)=\sum_{l\le i\le r}\sum_{1\le j\le \text{size}_k}\text{isanc}(end_{i}, p_{k, j})</script><p>其中 $\text{isanc}(x, y)$ 表示在fail树上 $x$ 是否为 $y$ 的祖先</p><p>看到 $\sum |s_i|\le 10^5$ 这条限制，容易想到对于 $|s_k|$ 根号分治</p><p>令 $M=\sum |s_i|$</p><ul><li>$|s_k|&lt;=T$<br> 容易得到一种做法，$\forall l\le i\le r$，对所有以 $end_i$ 为根的子树的所有点加1，然后查询所有 $p_{k,i}$ 点上的值之和<br> 把每个询问差分为成 $[1, l-1]$ 和 $[1, r]$ 两个区间，然后离线下来按右端点排序，维护区间修改单点查询<br> 树状数组可以做到 $\mathcal{O}(qT\log M+n\log M)$，当然更快的做法是分块的 $\mathcal{O}(qT+n\sqrt{M})$</li><li>$|s_k|&gt;T$<br> 满足这个条件的 $k$ 数量是 $\mathcal{O}(\frac{M}{T})$ 级别的，因此我们考虑对所有的 $k$ 预处理<br> 考虑另一种做法，把所有 $p_{k,i}$ 标上1，然后查询 $\forall l\le i\le r$，$end_i$ 子树和之和<br> 预处理时我们对 $end_i$ 的子树和做前缀和，询问的差分即可<br> $\mathcal{O}(q+\frac{M}{T}\times n)$</li></ul><p>选择一个合适的 $T$，我们视 $n$，$M$ 和 $q$ 为同阶，$T$ 取 $\sqrt{M}$ 即可<br>复杂度可以简单地认为是 $\mathcal{O}(n\sqrt{M})$</p><p>代码 <a href="https://codeforces.com/contest/587/submission/144319232">codeforces submission 144319232</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定 $n$ 个字符串 $S_{1…n}$.&lt;br&gt;定义 $\text{occur}(t, s)$ 为 字符串 $t$ 在字符串 $s$ 中的出现次数. 有 $q$ 次询问，每次给出 $l$，$r$ 和 $k$，输出 $\sum\limits_{l\le i\le r}\text{occur}(s_i, s_k)$.&lt;/p&gt;
&lt;p&gt;$n,k,\sum |s_i|\le 10^5$&lt;br&gt;</summary>
    
    
    
    <category term="根号算法" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="https://gzezfisher.top/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="AC自动机" scheme="https://gzezfisher.top/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    <category term="根号分治" scheme="https://gzezfisher.top/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
    
    <category term="根号分治" scheme="https://gzezfisher.top/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
    <category term="分块" scheme="https://gzezfisher.top/tags/%E5%88%86%E5%9D%97/"/>
    
    <category term="AC自动机" scheme="https://gzezfisher.top/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    <category term="fail树" scheme="https://gzezfisher.top/tags/fail%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1118F2 Tree Cutting (Hard Version)</title>
    <link href="https://gzezfisher.top/2022/01/27/cf1118f2/"/>
    <id>https://gzezfisher.top/2022/01/27/cf1118f2/</id>
    <published>2022-01-27T09:39:09.000Z</published>
    <updated>2022-01-30T10:25:38.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有 $n$ 个节点的树，节点可能有颜色，共 $k$ 种颜色，编号 $1…k$，保证每种颜色都出现. 有的点没有颜色，用 $0$ 表示. 将其划分为 $k$ 个联通块，是每个联通块中有且仅有一种颜色，颜色为 $0$ 的节点可以在任意联通块中. 求有多少中划分的方案.<br>$2\le k\le n\le 3\times 10^5$，答案对 $998244353$ 取模.<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们称将一个点划归一个有且仅有颜色 $c$ 的联通块为将这个点染上颜色 $c$</p><p>显然有一些点的染色是确定的，一些点可以染上多种颜色，其中所有颜色为 $c$ 的点与它们的LCA的路径上的点确定染上颜色 $c$，证明显然</p><p>我们先按照如下流程将这些颜色确定的点染色：</p><ol><li>找出同一颜色 $c$ 的点的LCA</li><li>依次从每个点开始往父亲上跳，一边跳一边染色</li><li>跳到一个点已经染色或已经到达LCA即可停止，如果跳到的点已经染上颜色且不为 $c$ 则两种颜色构成的联通块必然重叠，即没有合法方案</li></ol><p>接下来考虑树形DP<br>令 $f_{u,0}$ 表示在以 $u$ 为根的子树中，最上方联通块不包含已染色点的方案数，$f_{u,1}$ 表示在以 $u$ 为根的子树中，最上方联通块包含已染色点的方案数，$c_u$ 表示点 $u$ 的颜色</p><p>我们分两种情况讨论转移：</p><ul><li><p>$c_u\not=0$<br> 显然 $f_{u, 0}=0$<br> 对于 $f_{u, 1}$，再分情况讨论：</p><ul><li>$v\in\text{son}_u,c_v\not=0$<br> 能够确定边 $(u, v)$ 是否删去，对 $f_{u, 1}$ 贡献为 $f_{v, 1}=f_{v, 0}+f_{v, 1}$</li><li><p>$v\in\text{son}_u,c_v=0$<br> 若边 $(u, v)$ 删去，$v$ 所在联通块必须有色，否则该联通块将不包含任何一种颜色，对 $f_{u, 1}$ 贡献为 $f_{v, 1}$<br> 若边 $(u, v)$ 保留，$v$ 所在联通块必须无色，否则该联通块将包含多种颜色，对 $f_{u, 1}$ 贡献为 $f_{v, 0}$<br> 总贡献为 $f_{v, 0}+f_{v, 1}$</p><p>综上，$f_{u, 1}=\prod\limits_{v\in\text{son}_u}f_{v, 0}+f_{v, 1}$</p></li></ul></li><li>$c_u=0$<br> 类似的，$f_{u, 0}=\prod\limits_{v\in\text{son}_u}f_{v, 0}+f_{v, 1}$<br> 对于 $f_{u, 1}$，我们枚举 $u$ 继承哪一个儿子节点的颜色，即 $f_{u, 1}=\sum\limits_{v_1\in\text{son}_u}f_{v_1, 1}\times\prod\limits_{v_2\in\text{son}_u,v_2\not=v_1}f_{v_2, 0}+f_{v_2, 1}$<br> 对于这条式子我们维护 $f_{v, 0}+f_{v, 1}$ 的前缀积和后缀积即可</li></ul><p>总的时间复杂度 $\Theta(n)$ 到 $\Theta(n\log n)$，取决于求LCA的算法</p><p>代码 <a href="http://codeforces.com/contest/1118/submission/143330738">codeforces submission 143330738</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个有 $n$ 个节点的树，节点可能有颜色，共 $k$ 种颜色，编号 $1…k$，保证每种颜色都出现. 有的点没有颜色，用 $0$ 表示. 将其划分为 $k$ 个联通块，是每个联通块中有且仅有一种颜色，颜色为 $0$ 的节点可以在任意联通块中. 求有多少中划分的方案.&lt;br&gt;$2\le k\le n\le 3\times 10^5$，答案对 $998244353$ 取模.&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="树" scheme="https://gzezfisher.top/categories/%E6%A0%91/"/>
    
    <category term="树形DP" scheme="https://gzezfisher.top/categories/%E6%A0%91/%E6%A0%91%E5%BD%A2DP/"/>
    
    
    <category term="树形DP" scheme="https://gzezfisher.top/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>CF802O April Fools&#39; Problem (hard)</title>
    <link href="https://gzezfisher.top/2022/01/26/cf802o/"/>
    <id>https://gzezfisher.top/2022/01/26/cf802o/</id>
    <published>2022-01-26T14:20:22.000Z</published>
    <updated>2022-01-30T10:26:00.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有 $n$ 道题，第 $i$ 天可以花费 $a_i$ 准备一道题，花费 $b_i$ 打印一道题，每天最多准备一道题，打印一道题，准备的题可以留到以后打印，求打印 $k$ 道题的最小花费.<br>$1\le k\le n\le 5\times10^5$<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然可以费用流解决，建图如下.<br><img src="/img/cf802o/flow.svg" alt="费用流建图"></p><p>考虑优化费用流</p><p><article class="message">  <div class="message-header">    <p>引理</p>  </div>  <div class="message-body">    初始不含负圈的图在费用流的增广过程中不会出现负圈  </div></article>根据引理得，每次增广的增广路都是一条形如 $S\rightarrow X\rightarrow Y\rightarrow T’\rightarrow T$ 的路径，一共增广 $k$ 次.</p><p>设 $f_i$ 表示在残流网络上 $i+1$ 点向 $i$ 的流量，则一条增广路合法当且仅当 $S\rightarrow X,Y\rightarrow T’$ 这两条边有流量且满足下列两个条件之一：</p><ul><li>$X\le Y$</li><li>$X&gt;Y\land \min_{Y\le i&lt;X}f_i&gt;0$</li></ul><p>我们尝试用线段树来模拟这一过程，对于每一个区间 $[l, r]$，维护 $a$ 的最小值计为 $ma$，$b$ 的最小值计为 $mb$，从 $x$ 到 $l$ 有流量的最小 $a_x$ 计为 $fa$，从 $r+1$ 到 $x$ 有流量的最小 $b_x$ 计为 $fb$，从左到右的最小费用流计为 $f1$，从右到左的最小费用流计为 $f2$，从 $r+1$ 到 $l$ 的流量计为 $f$</p><p>每找到一条增广路，在线段树上更新流量并把 $a_X,b_Y$ 赋值 $\text{Infinity}$ 以标记 $S\rightarrow X,Y\rightarrow T’$ 这两条边没有流量</p><p>这时候我们发现这个做法是不可行的，应为我们没法对流量快速地区间修改</p><p>发现 $f_n$ 的值总是 $0$，我们将 $fa$，$fb$ 和 $f2$ 的定义修改为<strong>在整个区间每条边的流量都减去 $f$ 时原定义的值</strong>，这样一来区间 $[1, n]$ (也就是我们需要查询的区间) 的值是符合原定义的，二来区间修改时我们只需要更新流量，每次增广的时间复杂度可以做到 $\Theta(\log n)$</p><p>总时间复杂度为 $\Theta(k\log n)$</p><p>代码 <a href="http://codeforces.com/contest/802/submission/143973639">codeforces submission 143973639</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有 $n$ 道题，第 $i$ 天可以花费 $a_i$ 准备一道题，花费 $b_i$ 打印一道题，每天最多准备一道题，打印一道题，准备的题可以留到以后打印，求打印 $k$ 道题的最小花费.&lt;br&gt;$1\le k\le n\le 5\times10^5$&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="图论" scheme="https://gzezfisher.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="网络流" scheme="https://gzezfisher.top/categories/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="数据结构" scheme="https://gzezfisher.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="https://gzezfisher.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
    <category term="网络流" scheme="https://gzezfisher.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="线段树" scheme="https://gzezfisher.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF997D Cycles in product</title>
    <link href="https://gzezfisher.top/2022/01/26/cf997d/"/>
    <id>https://gzezfisher.top/2022/01/26/cf997d/</id>
    <published>2022-01-26T11:30:05.000Z</published>
    <updated>2022-01-27T13:20:01.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你大小为 $n_1, n_2$​的两棵树 $T_1, T_2$​，构造一张新图，该图中每一个点的编号为 $(u,v)$。如果在 $T_1$ ​中， $u_1$ ​和$u_2$ ​之间有边，那么在该图上，对于任意 $1\le v\le n_2$，$(u_1, v)$ 和 $(u_2, v)$ 之间有边。同样，如果在 $T_2$ ​中，$v_1$ ​和$v_2$​之间有边，那么在图上，对于任意 $1\le u\le n_1$，$(u, v_1)$ 和 $(u, v_2)$ 之间有边.<br>求这个图上长度为 $K$ 的环有多少个，环可以不为简单环，起始点或方向不同的环视为不同的环.<br>$n_1, n_2\le 4000, K\le 75$，答案对 $998244353$ 取模.<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>$T_1$ 上一个长度为 $K_1$ 的环和 $T_2$ 上一个长度为 $K_2$ 的环以不同方式组合对应图上 $\begin{pmatrix}K_1+K_2\\k_1\end{pmatrix}$ 个环<br>即答案为 $\sum\limits_{0\le i\le K}F1_i\times F2_{K-i}\times\begin{pmatrix}K\\i\end{pmatrix}$，其中 $F1_i$ 表示 $T_1$ 上长度为 $i$ 的环的个数，$F2_i$ 表示 $T_2$ 上长度为 $i$ 的环的个数</p><p>我们把每个点作为起始点分别计算，考虑到树上所有的环长度均为偶数，令 $f_{u, k}$ 表示以 $u$ 为起始点，长度为 $2\times k$ 的环的个数，有 $F_{2\times k}=\sum\limits_u f_{u, k}$<br>由于从父亲节点往儿子节点转移十分困难，不妨对于每个点只考虑在其子树中的环然后换根DP<br>考虑转移</p><script type="math/tex; mode=display">f_{u,k}=\sum_{0\le t<k}f_{u,t}\sum_{v\in \text{son}_u}f_{v,k-t-1}</script><p>令 $h_{u,k}=\sum_{v\in \text{son}_u}f_{v,k-t-1}$，有</p><script type="math/tex; mode=display">f_{u,k}=\sum_{0\le t<k}f_{u,t}\times h_{u, k-t-1}</script><p>换根DP维护 $h$，再通过 $h$ 计算 $f$<br>$\Theta((n_1+n_2)\times K^2)$ 足以通过此题</p><p>代码 <a href="http://codeforces.com/contest/997/submission/143516835">codeforces submission 143516835</a></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>复杂度瓶颈在 $f$ 的计算，考虑优化这一过程</p><p>令 $h’_{u,k}=h_{u,k-1}$，有</p><script type="math/tex; mode=display">f_{u,k}=\sum_{0\le t<k}f_{u,t}\times h'_{u,k-t}</script><p>令$G_u(x)=\sum_{1\le i\le k}h’_{u,i}\times x^i$，有</p><script type="math/tex; mode=display">\begin{align*}f_{u,k}&=[x^k]\sum_{1\le i\le k}G_u(x)^i\\&=[x^k]\frac{G_u(x)^{k+1}-G_u(x)}{G_u(x)-1}\end{align*}</script><p>多项式快速幂和求逆可以做到 $\Theta((n_1+n_2)K\log K)$ 的复杂度</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给你大小为 $n_1, n_2$​的两棵树 $T_1, T_2$​，构造一张新图，该图中每一个点的编号为 $(u,v)$。如果在 $T_1$ ​中， $u_1$ ​和$u_2$ ​之间有边，那么在该图上，对于任意 $1\le v\le n_2$，$(u_1, v)$ 和 $(u_2, v)$ 之间有边。同样，如果在 $T_2$ ​中，$v_1$ ​和$v_2$​之间有边，那么在图上，对于任意 $1\le u\le n_1$，$(u, v_1)$ 和 $(u, v_2)$ 之间有边.&lt;br&gt;求这个图上长度为 $K$ 的环有多少个，环可以不为简单环，起始点或方向不同的环视为不同的环.&lt;br&gt;$n_1, n_2\le 4000, K\le 75$，答案对 $998244353$ 取模.&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="树" scheme="https://gzezfisher.top/categories/%E6%A0%91/"/>
    
    <category term="树形DP" scheme="https://gzezfisher.top/categories/%E6%A0%91/%E6%A0%91%E5%BD%A2DP/"/>
    
    <category term="多项式" scheme="https://gzezfisher.top/categories/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    
    <category term="树形DP" scheme="https://gzezfisher.top/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
    <category term="多项式" scheme="https://gzezfisher.top/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CF717A Festival Organization</title>
    <link href="https://gzezfisher.top/2022/01/26/cf717a/"/>
    <id>https://gzezfisher.top/2022/01/26/cf717a/</id>
    <published>2022-01-26T08:34:11.000Z</published>
    <updated>2022-01-30T10:25:13.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个合法的串定义为：长度在 $[l, r]$ 之间，且只含 $0,1$，并且不存在连续 $2$ 个或更多的 $0$.<br>现在要选出 $k$ 个长度相同的不同的合法的串，问有几种选法，答案模 $10^9+7$.<br>$1\le l\le r\le10^{18}, 1\le k\le200$.<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>设 $F_{i,j}$ 表示长度为 $i$, 以 $j$ 结尾的合法串个数.<br>有 <script type="math/tex">\left\{      \begin{array}{**lr**}      F_{i,0}=F_{i-1,1} &  \\      F_{i,1}=F_{i-1,0}+F_{i-1,1} &     \end{array}  \right.</script><br>即 <script type="math/tex">\left\{      \begin{array}{**lr**}      F_{i,0}=\text{Fib}_{i} &  \\      F_{i,1}=\text{Fib}_{i+1} &     \end{array}  \right.</script><br>所以答案 <script type="math/tex">\text{Ans}=\sum\limits_{l+2\le i\le r+2}\begin{pmatrix}\text{Fib}_i\\k\end{pmatrix}</script></p><script type="math/tex; mode=display">\begin{align*}    \text{Ans}    =&\sum_{l+2\leq i\leq r+2} \begin{pmatrix}{\text{Fib}_i}\\k\end{pmatrix}\\    =&\frac{1}{k!}\sum_{l+2\le i\le r+2} {\text{Fib}_i}^{\underline{k}}\\    =&\frac{1}{k!}\sum_{l+2\le i\le r+2}\sum_{1\le j\le k}(-1)^{k-j}\begin{bmatrix}k\\ j \end{bmatrix}{\text{Fib}_i}^j\\    =&\frac{1}{k!}\sum_{1\le i\le k}(-1)^{k-i}\begin{bmatrix}k\\ i \end{bmatrix}\sum_{l+2\le j\le r+2}{\text{Fib}_j}^i\end{align*}</script><p>考虑带入斐波那契数的通项，令 $A=\frac{1+\sqrt{5}}{2}, B=\frac{1-\sqrt{5}}{2}$</p><script type="math/tex; mode=display">\begin{align*}    \text{Ans}    =&\frac{1}{k!}\sum_{1\le i\le k}(-1)^{k-i}\begin{bmatrix}k\\ i \end{bmatrix}\sum_{l+2\le j\le r+2}[{\frac{1}{\sqrt{5}}(A^j-B^j)}]^i\\    =&\frac{1}{k!}\sum_{1\le i\le k}(-1)^{k-i}\begin{bmatrix}k\\ i \end{bmatrix}(\frac{1}{\sqrt{5}})^i\sum_{l+2\le j\le r+2}\sum_{0\le p\le i}\begin{pmatrix}i\\p\end{pmatrix}(-1)^p(A^{i-p}B^p)^j\\    =&\frac{1}{k!}\sum_{1\le i\le k}(-1)^{k-i}\begin{bmatrix}k\\ i \end{bmatrix}(\frac{1}{\sqrt{5}})^i\sum_{0\le j\le i}\begin{pmatrix}i\\j\end{pmatrix}(-1)^j\sum_{l+2\le p\le r+2}(A^{i-j}B^j)^p\end{align*}</script><p>等比数列求和快速计算式子后面部分<br>$\Theta(k^2\times(\log l+\log r))$</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>本题涉及对 $\sqrt{5}$ 的计算，然而在模 $10^9+7$ 意义下 $5$ 没有二次剩余，扩域维护即可</p><p>代码 <a href="http://codeforces.com/contest/717/submission/137205589">codeforces submission 137205589</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;一个合法的串定义为：长度在 $[l, r]$ 之间，且只含 $0,1$，并且不存在连续 $2$ 个或更多的 $0$.&lt;br&gt;现在要选出 $k$ 个长度相同的不同的合法的串，问有几种选法，答案模 $10^9+7$.&lt;br&gt;$1\le l\le r\le10^{18}, 1\le k\le200$.&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="数学" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="组合" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88/"/>
    
    
    <category term="斯特林数" scheme="https://gzezfisher.top/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    
    <category term="二项式定理" scheme="https://gzezfisher.top/tags/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>UOJ450 复读机</title>
    <link href="https://gzezfisher.top/2021/10/16/uoj450/"/>
    <id>https://gzezfisher.top/2021/10/16/uoj450/</id>
    <published>2021-10-16T08:40:00.000Z</published>
    <updated>2022-01-27T13:58:33.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>$k$ 种球，每种个数必须是 $d$ 的倍数，共 $n$ 个，求排成一行的方案数.</p><p>$n\le 10^9, k\le 5\times10^5, d\le 3$，答案对 $19491001$ 取模.<br><span id="more"></span></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><script type="math/tex; mode=display">\begin{align*}\text{Ans}&=n!\sum_{i_1 \ge 0,d\mid i_1}\frac{1}{i_1!}\sum_{0\le i_2,d\mid i_2}\frac{1}{i_2!}\cdots\sum_{0\le i_k,d\mid i_k}\frac{1}{i_k!}\\&=[x^n]n!(\sum_{i\ge 0,d\mid i}\frac{x^i}{i!})^k\\\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\sum_{i\ge 0,d\mid i}\frac{x^i}{i!}&=\sum_{i\ge 0}\frac{x^i}{i!}\frac{1}{d}\sum_{0\le j < d}{\omega_d^j}^i& \text{单位根反演}\\&=\frac{1}{d}\sum_{0\le j < d}\sum_{i\ge 0}\frac{(x\omega_d^j)^i}{i!}\\&=\frac{1}{d}\sum_{0\le j < d}e^{x\omega_d^j}& \text{泰勒展开}\\\end{align*}</script><p>$d=2$：</p><script type="math/tex; mode=display">\begin{align*}\sum_{i\ge 0,d\mid i}\frac{x^i}{i!}&=\frac{1}{d}\sum_{0\le j < d}e^{x\omega_d^j}\\&=\frac{e^x+e^{-x}}{2}\\(\sum_{i\ge 0,d\mid i}\frac{x^i}{i!})^k&=n!(\frac{e^x+e^{-x}}{2})^k\\&=\frac{1}{2^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}e^{ix}e^{-x(k-i)} & \text{二项式定理}\\&=\frac{1}{2^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}e^{2ix-kx}\\\text{Ans}&=[x^n]n!(\sum_{i\ge 0,d\mid i}\frac{x^i}{i!})^k\\&=\frac{n!}{2^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}[x^n]e^{2ix-kx}\\&=\frac{n!}{2^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}\frac{(2i-k)^n}{n!} & \text{泰勒展开}\\&=\frac{1}{2^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}(2i-k)^n\end{align*}</script><p>$d=3$：</p><script type="math/tex; mode=display">\begin{align*}\sum_{i\ge 0,d\mid i}\frac{x^i}{i!}&=\frac{1}{d}\sum_{0\le j < d}e^{x\omega_d^j}\\&=\frac{e^x+e^{\omega_3x}+e^{\omega_3^2x}}{3}\\(\sum_{i\ge 0,d\mid i}\frac{x^i}{i!})^k&=n!(\frac{e^x+e^{\omega_3x}+e^{\omega_3^2x}}{3})^k\\&=\frac{1}{3^k}\sum_{0\le i\le k}\begin{pmatrix}k\\i\end{pmatrix}\sum_{0\le j\le k-i}\begin{pmatrix}k-i\\j\end{pmatrix}e^{ix}e^{j\omega_3x}e^{(k-i-j)\omega_3^2x} & \text{多项式定理}\\&=\frac{1}{3^k}\sum_{0\le i\le k}\sum_{0\le j\le k-i}\begin{pmatrix}k\\i\end{pmatrix}\begin{pmatrix}k-i\\j\end{pmatrix}e^{ix+j\omega_3x+k\omega_3^2x-i\omega_3^2x-j\omega_3^2x}\\\text{Ans}&=[x^n]n!(\sum_{i\ge 0,d\mid i}\frac{x^i}{i!})^k\\&=\frac{n!}{3^k}\sum_{0\le i\le k}\sum_{0\le j\le k-i}\begin{pmatrix}k\\i\end{pmatrix}\begin{pmatrix}k-i\\j\end{pmatrix}[x^n]e^{ix+j\omega_3x+k\omega_3^2x-i\omega_3^2x-j\omega_3^2x}\\&=\frac{n!}{3^k}\sum_{0\le i\le k}\sum_{0\le j\le k-i}\begin{pmatrix}k\\i\end{pmatrix}\begin{pmatrix}k-i\\j\end{pmatrix}\frac{(i+j\omega_3+k\omega_3^2-i\omega_3^2-j\omega_3^2)^n}{n!} & \text{泰勒展开}\\&=\frac{1}{3^k}\sum_{0\le i\le k}\sum_{0\le j\le k-i}\begin{pmatrix}k\\i\end{pmatrix}\begin{pmatrix}k-i\\j\end{pmatrix}(i+j\omega_3+k\omega_3^2-i\omega_3^2-j\omega_3^2)^n\end{align*}</script>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;$k$ 种球，每种个数必须是 $d$ 的倍数，共 $n$ 个，求排成一行的方案数.&lt;/p&gt;
&lt;p&gt;$n\le 10^9, k\le 5\times10^5, d\le 3$，答案对 $19491001$ 取模.&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="数学" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="组合" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88/"/>
    
    <category term="数论" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/"/>
    
    
    <category term="二项式定理" scheme="https://gzezfisher.top/tags/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/"/>
    
    <category term="单位根反演" scheme="https://gzezfisher.top/tags/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/"/>
    
    <category term="泰勒展开" scheme="https://gzezfisher.top/tags/%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6241 性能优化</title>
    <link href="https://gzezfisher.top/2021/01/15/loj6241/"/>
    <id>https://gzezfisher.top/2021/01/15/loj6241/</id>
    <published>2021-01-15T15:01:00.000Z</published>
    <updated>2022-01-28T02:27:01.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求 </p><script type="math/tex; mode=display">T = \sum_{1\le i\le n}\sum_{1\le j\le\lfloor \frac{n}{i} \rfloor}\sum_{1\le k\le j}[\gcd(j,k)=1]</script><p>多组数据<br><span id="more"></span><br>$n\le 10^{10^6}$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><script type="math/tex; mode=display">T = \sum_{1\le i\le n}\sum_{1\le j\le\lfloor \frac{n}{i} \rfloor}\varphi(j)</script><p>令</p><script type="math/tex; mode=display">\text{S}(n) = \sum_{1\le i\le n}\varphi(i)</script><p>则有</p><script type="math/tex; mode=display">\begin{align*}T &= \sum_{1\le i\le n}\text{S}(\lfloor \frac{n}{i} \rfloor) \\  &= \text{S}(n) + \sum_{2\le i\le n}\text{S}(\lfloor \frac{n}{i} \rfloor) \\\end{align*}</script><p>根据杜教筛，由 $\varphi*\text{I}=\text{Id}$，有</p><script type="math/tex; mode=display">\text{I}(1)\times \text{S}(n)=\sum_{1\le i\le n}\text{Id}(i)-\sum_{2\le i\le n}\text{S}(\lfloor\frac{n}{i}\rfloor)\times \text{I}(i)</script><p>即</p><script type="math/tex; mode=display">\text{S}(n)=\frac{n(n+1)}{2}-\sum_{2\le i\le n}\text{S}(\lfloor\frac{n}{i}\rfloor)</script><p>带回原式得</p><script type="math/tex; mode=display">\begin{align*}T=&\frac{n(n+1)}{2}-\sum_{2\le i\le n}\text{S}(\lfloor\frac{n}{i}\rfloor) + \sum_{2\le i\le n}\text{S}(\lfloor \frac{n}{i} \rfloor)\\=&\frac{n(n+1)}{2}\end{align*}</script>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;求 &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;T = \sum_{1\le i\le n}\sum_{1\le j\le\lfloor \frac{n}{i} \rfloor}\sum_{1\le k\le j}[\gcd(j,k)=1]&lt;/script&gt;&lt;p&gt;多组数据&lt;br&gt;</summary>
    
    
    
    <category term="题解" scheme="https://gzezfisher.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="数学" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数论" scheme="https://gzezfisher.top/categories/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/"/>
    
    
    <category term="杜教筛" scheme="https://gzezfisher.top/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
</feed>
