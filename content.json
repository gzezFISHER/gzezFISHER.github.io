{"pages":[{"title":"about","text":"这里是我的个人博客.我的洛谷博客 我的洛谷账号: FISHER_ Github: gzezFISHER","link":"/about/index.html"},{"title":"404 not found","text":"404","link":"/404.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"CF717A Festival Organization","text":"题意一个合法的串定义为：长度在 $[l, r]$ 之间，且只含 $0,1$，并且不存在连续 $2$ 个或更多的 $0$.现在要选出 $k$ 个长度相同的不同的合法的串，问有几种选法，答案模 $10^9+7$.$1\\le l\\le r\\le10^{18}, 1\\le k\\le200$. 题解设 $F_{i,j}$ 表示长度为 $i$, 以 $j$ 结尾的合法串个数.有 \\left\\{ \\begin{array}{**lr**} F_{i,0}=F_{i-1,1} & \\\\ F_{i,1}=F_{i-1,0}+F_{i-1,1} & \\end{array} \\right.即 \\left\\{ \\begin{array}{**lr**} F_{i,0}=\\text{Fib}_{i} & \\\\ F_{i,1}=\\text{Fib}_{i+1} & \\end{array} \\right.所以答案 \\text{Ans}=\\sum\\limits_{l+2\\le i\\le r+2}\\begin{pmatrix}\\text{Fib}_i\\\\k\\end{pmatrix} \\begin{align*} \\text{Ans} =&\\sum_{l+2\\leq i\\leq r+2} \\begin{pmatrix}{\\text{Fib}_i}\\\\k\\end{pmatrix}\\\\ =&\\frac{1}{k!}\\sum_{l+2\\le i\\le r+2} {\\text{Fib}_i}^{\\underline{k}}\\\\ =&\\frac{1}{k!}\\sum_{l+2\\le i\\le r+2}\\sum_{1\\le j\\le k}(-1)^{k-j}\\begin{bmatrix}k\\\\ j \\end{bmatrix}{\\text{Fib}_i}^j\\\\ =&\\frac{1}{k!}\\sum_{1\\le i\\le k}(-1)^{k-i}\\begin{bmatrix}k\\\\ i \\end{bmatrix}\\sum_{l+2\\le j\\le r+2}{\\text{Fib}_j}^i \\end{align*}考虑带入斐波那契数的通项，令 $A=\\frac{1+\\sqrt{5}}{2}, B=\\frac{1-\\sqrt{5}}{2}$ \\begin{align*} \\text{Ans} =&\\frac{1}{k!}\\sum_{1\\le i\\le k}(-1)^{k-i}\\begin{bmatrix}k\\\\ i \\end{bmatrix}\\sum_{l+2\\le j\\le r+2}[{\\frac{1}{\\sqrt{5}}(A^j-B^j)}]^i\\\\ =&\\frac{1}{k!}\\sum_{1\\le i\\le k}(-1)^{k-i}\\begin{bmatrix}k\\\\ i \\end{bmatrix}(\\frac{1}{\\sqrt{5}})^i\\sum_{l+2\\le j\\le r+2}\\sum_{0\\le p\\le i}\\begin{pmatrix}i\\\\p\\end{pmatrix}(-1)^p(A^{i-p}B^p)^j\\\\ =&\\frac{1}{k!}\\sum_{1\\le i\\le k}(-1)^{k-i}\\begin{bmatrix}k\\\\ i \\end{bmatrix}(\\frac{1}{\\sqrt{5}})^i\\sum_{0\\le j\\le i}\\begin{pmatrix}i\\\\j\\end{pmatrix}(-1)^j\\sum_{l+2\\le p\\le r+2}(A^{i-j}B^j)^p \\end{align*}等比数列求和快速计算式子后面部分$\\Theta(k^2\\times(\\log l+\\log r))$ 细节本题涉及对 $\\sqrt{5}$ 的计算，然而在模 $10^9+7$ 意义下 $5$ 没有二次剩余，我们用扩域解决 代码 codeforces submission 137205589","link":"/2022/01/26/cf717a/"},{"title":"CF997D Cycles in product","text":"题意给你大小为 $n_1, n_2$​的两棵树 $T_1, T_2$​，构造一张新图，该图中每一个点的编号为 $(u,v)$。如果在 $T_1$ ​中， $u_1$ ​和$u_2$ ​之间有边，那么在该图上，对于任意 $1\\le v\\le n_2$，$(u_1, v)$ 和 $(u_2, v)$ 之间有边。同样，如果在 $T_2$ ​中，$v_1$ ​和$v_2$​之间有边，那么在图上，对于任意 $1\\le u\\le n_1$，$(u, v_1)$ 和 $(u, v_2)$ 之间有边.求这个图上长度为 $K$ 的环有多少个，环可以不为简单环，起始点或方向不同的环视为不同的环.$n_1, n_2\\le 4000, K\\le 75$，答案对 $998244353$ 取模. 题解$T_1$ 上一个长度为 $K_1$ 的环和 $T_2$ 上一个长度为 $K_2$ 的环以不同方式组合对应图上 $\\begin{pmatrix}K_1+K_2\\\\k_1\\end{pmatrix}$ 个环即答案为 $\\sum\\limits_{0\\le i\\le K}F1_i\\times F2_{K-i}\\times\\begin{pmatrix}K\\\\i\\end{pmatrix}$，其中 $F1_i$ 表示 $T_1$ 上长度为 $i$ 的环的个数，$F2_i$ 表示 $T_2$ 上长度为 $i$ 的环的个数 我们把每个点作为起始点分别计算，考虑到树上所有的环长度均为偶数，令 $f_{u, k}$ 表示以 $u$ 为起始点，长度为 $2\\times k$ 的环的个数，有 $F_{2\\times k}=\\sum\\limits_u f_{u, k}$由于从父亲节点往儿子节点转移十分困难，不妨对于每个点只考虑在其子树中的环然后换根DP考虑转移 f_{u,k}=\\sum_{0\\le t","link":"/2022/01/26/cf997d/"},{"title":"CF802O April Fools&#39; Problem (hard)","text":"题意有 $n$ 道题，第 $i$ 天可以花费 $a_i$ 准备一道题，花费 $b_i$ 打印一道题，每天最多准备一道题，打印一道题，准备的题可以留到以后打印，求打印 $k$ 道题的最小花费.$1\\le k\\le n\\le 5\\times10^5$ 题解显然可以费用流解决，建图如下. 考虑优化费用流 引理 初始不含负圈的图在费用流的增广过程中不会出现负圈 根据引理得，每次增广的增广路都是一条形如 $S\\rightarrow X\\rightarrow Y\\rightarrow T’\\rightarrow T$ 的路径，一共增广 $k$ 次. 设 $f_i$ 表示在残流网络上 $i+1$ 点向 $i$ 的流量，则一条增广路合法当且仅当 $S\\rightarrow X,Y\\rightarrow T’$ 这两条边有流量且满足下列两个条件之一： $X\\le Y$ $X&gt;Y\\land \\min_{Y\\le i&lt;X}f_i&gt;0$ 我们尝试用线段树来模拟这一过程，对于每一个区间 $[l, r]$，维护 $a$ 的最小值计为 $ma$，$b$ 的最小值计为 $mb$，从 $x$ 到 $l$ 有流量的最小 $a_x$ 计为 $fa$，从 $r+1$ 到 $x$ 有流量的最小 $b_x$ 计为 $fb$，从左到右的最小费用流计为 $f1$，从右到左的最小费用流计为 $f2$，从 $r+1$ 到 $l$ 的流量计为 $f$ 每找到一条增广路，在线段树上更新流量并把 $a_X,b_Y$ 赋值 $\\text{Infinity}$ 以标记 $S\\rightarrow X,Y\\rightarrow T’$ 这两条边没有流量 这时候我们发现这个做法是不可行的，应为我们没法对流量快速地区间修改 发现 $f_n$ 的值总是 $0$，我们将 $fa$，$fb$ 和 $f2$ 的定义修改为在整个区间每条边的流量都减去 $f$ 时原定义的值，这样一来区间 $[1, n]$ (也就是我们需要查询的区间) 的值是符合原定义的，二来区间修改时我们只需要更新流量，每次增广的时间复杂度可以做到 $\\Theta(\\log n)$ 总时间复杂度为 $\\Theta(k\\log n)$ 代码 codeforces submission 143973639","link":"/2022/01/26/cf802o/"},{"title":"CF1118F2 Tree Cutting (Hard Version)","text":"题意给定一个有 $n$ 个节点的树，节点可能有颜色，共 $k$ 种颜色，编号 $1…k$，保证每种颜色都出现. 有的点没有颜色，用 $0$ 表示. 将其划分为 $k$ 个联通块，是每个联通块中有且仅有一种颜色，颜色为 $0$ 的节点可以在任意联通块中. 求有多少中划分的方案.$2\\le k\\le n\\le 3\\times 10^5$，答案对 $998244353$ 取模. 题解我们称将一个点划归一个有且仅有颜色 $c$ 的联通块为将这个点染上颜色 $c$ 显然有一些点的染色是确定的，一些点可以染上多种颜色，其中所有颜色为 $c$ 的点与它们的LCA的路径上的点确定染上颜色 $c$，证明显然 我们先按照如下流程将这些颜色确定的点染色： 找出同一颜色 $c$ 的点的LCA 依次从每个点开始往父亲上跳，一边跳一边染色 跳到一个点已经染色或已经到达LCA即可停止，如果跳到的点已经染上颜色且不为 $c$ 则两种颜色构成的联通块必然重叠，即没有合法方案 接下来考虑树形DP令 $f_{u,0}$ 表示在以 $u$ 为根的子树中，最上方联通块不包含已染色点的方案数，$f_{u,1}$ 表示在以 $u$ 为根的子树中，最上方联通块包含已染色点的方案数，$c_u$ 表示点 $u$ 的颜色 我们分两种情况讨论转移： $c_u\\not=0$显然 $f_{u, 0}=0$对于 $f_{u, 1}$，再分情况讨论： $v\\in\\text{son}_u,c_v\\not=0$能够确定边 $(u, v)$ 是否删去，对 $f_{u, 1}$ 贡献为 $f_{v, 1}=f_{v, 0}+f_{v, 1}$ $v\\in\\text{son}_u,c_v=0$若边 $(u, v)$ 删去，$v$ 所在联通块必须有色，否则该联通块将不包含任何一种颜色，对 $f_{u, 1}$ 贡献为 $f_{v, 1}$若边 $(u, v)$ 保留，$v$ 所在联通块必须无色，否则该联通块将包含多种颜色，对 $f_{u, 1}$ 贡献为 $f_{v, 0}$总贡献为 $f_{v, 0}+f_{v, 1}$ 综上，$f_{u, 1}=\\prod\\limits_{v\\in\\text{son}_u}f_{v, 0}+f_{v, 1}$ $c_u=0$类似的，$f_{u, 0}=\\prod\\limits_{v\\in\\text{son}_u}f_{v, 0}+f_{v, 1}$对于 $f_{u, 1}$，我们枚举 $u$ 继承哪一个儿子节点的颜色，即 $f_{u, 1}=\\sum\\limits_{v_1\\in\\text{son}_u}f_{v_1, 1}\\times\\prod\\limits_{v_2\\in\\text{son}_u,v_2\\not=v_1}f_{v_2, 0}+f_{v_2, 1}$对于这条式子我们维护 $f_{v, 0}+f_{v, 1}$ 的前缀积和后缀积即可 总的时间复杂度 $\\Theta(n)$ 到 $\\Theta(n\\log n)$，取决于求LCA的算法 代码 codeforces submission 143330738","link":"/2022/01/27/cf1118f2/"},{"title":"UOJ450 复读机","text":"题意$k$ 种球，每种个数必须是 $d$ 的倍数，共 $n$ 个，求排成一行的方案数. $n\\le 10^9, k\\le 5\\times10^5, d\\le 3$，答案对 $19491001$ 取模. 题解 \\begin{align*} \\text{Ans}&=n!\\sum_{i_1 \\ge 0,d\\mid i_1}\\frac{1}{i_1!}\\sum_{0\\le i_2,d\\mid i_2}\\frac{1}{i_2!}\\cdots\\sum_{0\\le i_k,d\\mid i_k}\\frac{1}{i_k!}\\\\ &=[x^n]n!(\\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!})^k\\\\ \\end{align*} \\begin{align*} \\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!}&=\\sum_{i\\ge 0}\\frac{x^i}{i!}\\frac{1}{d}\\sum_{0\\le j < d}{\\omega_d^j}^i& \\text{单位根反演}\\\\ &=\\frac{1}{d}\\sum_{0\\le j < d}\\sum_{i\\ge 0}\\frac{(x\\omega_d^j)^i}{i!}\\\\ &=\\frac{1}{d}\\sum_{0\\le j < d}e^{x\\omega_d^j}& \\text{泰勒展开}\\\\ \\end{align*}$d=2$： \\begin{align*} \\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!}&=\\frac{1}{d}\\sum_{0\\le j < d}e^{x\\omega_d^j}\\\\ &=\\frac{e^x+e^{-x}}{2}\\\\ (\\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!})^k&=n!(\\frac{e^x+e^{-x}}{2})^k\\\\ &=\\frac{1}{2^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}e^{ix}e^{-x(k-i)} & \\text{二项式定理}\\\\ &=\\frac{1}{2^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}e^{2ix-kx}\\\\ \\text{Ans}&=[x^n]n!(\\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!})^k\\\\ &=\\frac{n!}{2^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}[x^n]e^{2ix-kx}\\\\ &=\\frac{n!}{2^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\frac{(2i-k)^n}{n!} & \\text{泰勒展开}\\\\ &=\\frac{1}{2^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}(2i-k)^n \\end{align*}$d=3$： \\begin{align*} \\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!}&=\\frac{1}{d}\\sum_{0\\le j < d}e^{x\\omega_d^j}\\\\ &=\\frac{e^x+e^{\\omega_3x}+e^{\\omega_3^2x}}{3}\\\\ (\\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!})^k&=n!(\\frac{e^x+e^{\\omega_3x}+e^{\\omega_3^2x}}{3})^k\\\\ &=\\frac{1}{3^k}\\sum_{0\\le i\\le k}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\sum_{0\\le j\\le k-i}\\begin{pmatrix}k-i\\\\j\\end{pmatrix}e^{ix}e^{j\\omega_3x}e^{(k-i-j)\\omega_3^2x} & \\text{多项式定理}\\\\ &=\\frac{1}{3^k}\\sum_{0\\le i\\le k}\\sum_{0\\le j\\le k-i}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\begin{pmatrix}k-i\\\\j\\end{pmatrix}e^{ix+j\\omega_3x+k\\omega_3^2x-i\\omega_3^2x-j\\omega_3^2x}\\\\ \\text{Ans}&=[x^n]n!(\\sum_{i\\ge 0,d\\mid i}\\frac{x^i}{i!})^k\\\\ &=\\frac{n!}{3^k}\\sum_{0\\le i\\le k}\\sum_{0\\le j\\le k-i}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\begin{pmatrix}k-i\\\\j\\end{pmatrix}[x^n]e^{ix+j\\omega_3x+k\\omega_3^2x-i\\omega_3^2x-j\\omega_3^2x}\\\\ &=\\frac{n!}{3^k}\\sum_{0\\le i\\le k}\\sum_{0\\le j\\le k-i}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\begin{pmatrix}k-i\\\\j\\end{pmatrix}\\frac{(i+j\\omega_3+k\\omega_3^2-i\\omega_3^2-j\\omega_3^2)^n}{n!} & \\text{泰勒展开}\\\\ &=\\frac{1}{3^k}\\sum_{0\\le i\\le k}\\sum_{0\\le j\\le k-i}\\begin{pmatrix}k\\\\i\\end{pmatrix}\\begin{pmatrix}k-i\\\\j\\end{pmatrix}(i+j\\omega_3+k\\omega_3^2-i\\omega_3^2-j\\omega_3^2)^n \\end{align*}","link":"/2021/10/16/uoj450/"},{"title":"LOJ6241 性能优化","text":"题意求 T = \\sum_{1\\le i\\le n}\\sum_{1\\le j\\le\\lfloor \\frac{n}{i} \\rfloor}\\sum_{1\\le k\\le j}[\\gcd(j,k)=1]多组数据$n\\le 10^{10^6}$ 题解T = \\sum_{1\\le i\\le n}\\sum_{1\\le j\\le\\lfloor \\frac{n}{i} \\rfloor}\\varphi(j)令 \\text{S}(n) = \\sum_{1\\le i\\le n}\\varphi(i)则有 \\begin{align*} T &= \\sum_{1\\le i\\le n}\\text{S}(\\lfloor \\frac{n}{i} \\rfloor) \\\\ &= \\text{S}(n) + \\sum_{2\\le i\\le n}\\text{S}(\\lfloor \\frac{n}{i} \\rfloor) \\\\ \\end{align*}根据杜教筛，由 $\\varphi*\\text{I}=\\text{Id}$，有 \\text{I}(1)\\times \\text{S}(n)=\\sum_{1\\le i\\le n}\\text{Id}(i)-\\sum_{2\\le i\\le n}\\text{S}(\\lfloor\\frac{n}{i}\\rfloor)\\times \\text{I}(i)即 \\text{S}(n)=\\frac{n(n+1)}{2}-\\sum_{2\\le i\\le n}\\text{S}(\\lfloor\\frac{n}{i}\\rfloor)带回原式得 \\begin{align*} T=&\\frac{n(n+1)}{2}-\\sum_{2\\le i\\le n}\\text{S}(\\lfloor\\frac{n}{i}\\rfloor) + \\sum_{2\\le i\\le n}\\text{S}(\\lfloor \\frac{n}{i} \\rfloor)\\\\ =&\\frac{n(n+1)}{2} \\end{align*}","link":"/2021/01/15/loj6241/"},{"title":"CF587F Duff is Mad","text":"题意给定 $n$ 个字符串 $S_{1…n}$.定义 $\\text{occur}(t, s)$ 为 字符串 $t$ 在字符串 $s$ 中的出现次数. 有 $q$ 次询问，每次给出 $l$，$r$ 和 $k$，输出 $\\sum\\limits_{l\\le i\\le r}\\text{occur}(s_i, s_k)$. $n,k,\\sum |s_i|\\le 10^5$ 题解我们对所有串建立fail树 令 $p_{i,j}$ 表示串 $s_i$ 的前 $j$ 个字符在AC自动机上对应点的编号，$end_{i}$ 表示串 $s_i$ 在AC自动机上对应点的编号有 \\sum_{l\\le i\\le r}\\text{occur}(s_i, s_k)=\\sum_{l\\le i\\le r}\\sum_{1\\le j\\le \\text{size}_k}\\text{isanc}(end_{i}, p_{k, j})其中 $\\text{isanc}(x, y)$ 表示在fail树上 $x$ 是否为 $y$ 的祖先 看到 $\\sum |s_i|\\le 10^5$ 这条限制，容易想到对于 $|s_k|$ 根号分治 令 $M=\\sum |s_i|$ $|s_k|&lt;=T$容易得到一种做法，$\\forall l\\le i\\le r$，对所有以 $end_i$ 为根的子树的所有点加1，然后查询所有 $p_{k,i}$ 点上的值之和把每个询问差分为成 $[1, l-1]$ 和 $[1, r]$ 两个区间，然后离线下来按右端点排序，维护区间修改单点查询树状数组可以做到 $\\mathcal{O}(qT\\log M+n\\log M)$，当然更快的做法是分块的 $\\mathcal{O}(qT+n\\sqrt{M})$ $|s_k|&gt;T$满足这个条件的 $k$ 数量是 $\\mathcal{O}(\\frac{M}{T})$ 级别的，因此我们考虑对所有的 $k$ 预处理考虑另一种做法，把所有 $p_{k,i}$ 标上1，然后查询 $\\forall l\\le i\\le r$，$end_i$ 子树和之和预处理时我们对 $end_i$ 的子树和做前缀和，询问的差分即可$\\mathcal{O}(q+\\frac{M}{T}\\times n)$ 选择一个合适的 $T$，我们视 $n$，$M$ 和 $q$ 为同阶，$T$ 取 $\\sqrt{M}$ 即可复杂度可以简单地认为是 $\\mathcal{O}(n\\sqrt{M})$ 代码 codeforces submission 144319232","link":"/2022/01/28/cf587f/"},{"title":"CF1039D You Are Given a Tree","text":"题意给定一棵有 $n$ 个节点的树. 对于满足 $1\\le k\\le n$ 的每一个 $k$，把树分成若干条包含 $k$ 个顶点的链，其中每个点最多属于一条链，问最多能分得几条链. $n\\le 10^5$ 题解考虑 $k$ 固定时怎么做 我们自下而上贪心，对于一个点，如果在它的子树内有一条经过该点且不经过以被使用点的链，那么我们就将这条链计入答案并将该点标记为使用过 简单证明一下：对于点 $u$ 满足在其子树内有一条经过该点且不经过以被使用点的链，如果这条链不计入答案，而是选取一条经过 $u$ 的但不完全在 $u$ 子树中的链，这样划分的链数不会增加，反而会占用这条链在点 $u$ 子树外的点因此，按照上述方法贪心是最优的 令 $f_i$ 表示 $k=i$ 时的答案，显然有 $f_i\\le\\lfloor\\frac{n}{i}\\rfloor$ 类似除法分块，$f_i$ 一共只有 $\\mathcal{O}(\\sqrt{n})$ 种取值证明如下： $i\\le \\sqrt{n}$显然只有不超过 $\\sqrt{n}$ 种取值 $i&gt;\\sqrt{n}$$f_i&lt;\\lfloor\\frac{n}{sqrt{n}}\\rfloor=\\sqrt{n}$显然也只有不超过 $\\sqrt{n}$ 种取值 因此我们对于每一种取值二分右端点，时间复杂度为 $\\mathcal{O}(n\\sqrt{n}\\log n)$，不足以通过此题 观察到前几种取值比较密集，对每种取值二分是很浪费的，考虑对前 $T$ 项直接暴力，只对后面的 $\\mathcal{O}(\\frac{n}{T})$ 种取值二分 时间复杂度为 $\\mathcal{O}(nT+\\frac{n}{T}\\log n)$，$T$ 取 $\\sqrt{n\\log n}$ 时有最优复杂度 $\\mathcal{O}(n\\sqrt{n\\log n})$ 细节实现的时候注意常数，特别是不要每次贪心都dfs一遍，推荐直接在dfs序上做 代码 codeforces submission 144337474","link":"/2022/01/29/cf1039d/"}],"tags":[{"name":"斯特林数","slug":"斯特林数","link":"/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"},{"name":"二项式定理","slug":"二项式定理","link":"/tags/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/"},{"name":"树形DP","slug":"树形DP","link":"/tags/%E6%A0%91%E5%BD%A2DP/"},{"name":"多项式","slug":"多项式","link":"/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"},{"name":"网络流","slug":"网络流","link":"/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"线段树","slug":"线段树","link":"/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"单位根反演","slug":"单位根反演","link":"/tags/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/"},{"name":"泰勒展开","slug":"泰勒展开","link":"/tags/%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80/"},{"name":"杜教筛","slug":"杜教筛","link":"/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"},{"name":"根号分治","slug":"根号分治","link":"/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"},{"name":"分块","slug":"分块","link":"/tags/%E5%88%86%E5%9D%97/"},{"name":"AC自动机","slug":"AC自动机","link":"/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"},{"name":"fail树","slug":"fail树","link":"/tags/fail%E6%A0%91/"},{"name":"贪心","slug":"贪心","link":"/tags/%E8%B4%AA%E5%BF%83/"},{"name":"二分","slug":"二分","link":"/tags/%E4%BA%8C%E5%88%86/"},{"name":"除法分块","slug":"除法分块","link":"/tags/%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/%E9%A2%98%E8%A7%A3/"},{"name":"数学","slug":"数学","link":"/categories/%E6%95%B0%E5%AD%A6/"},{"name":"树","slug":"树","link":"/categories/%E6%A0%91/"},{"name":"多项式","slug":"多项式","link":"/categories/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"},{"name":"数据结构","slug":"数据结构","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"树形DP","slug":"树/树形DP","link":"/categories/%E6%A0%91/%E6%A0%91%E5%BD%A2DP/"},{"name":"组合","slug":"数学/组合","link":"/categories/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88/"},{"name":"线段树","slug":"数据结构/线段树","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"数论","slug":"数学/数论","link":"/categories/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/"},{"name":"图论","slug":"图论","link":"/categories/%E5%9B%BE%E8%AE%BA/"},{"name":"网络流","slug":"图论/网络流","link":"/categories/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"字符串","slug":"字符串","link":"/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"AC自动机","slug":"字符串/AC自动机","link":"/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"},{"name":"根号算法","slug":"根号算法","link":"/categories/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"}]}